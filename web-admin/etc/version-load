#!/usr/bin/env node
/**
 *  Fetch a version, convert it to JSON format, and load into a mongodb
 *  database.
 *
 *  Two collections will be used:
 *    versions                Store metadata about the specific version;
 *    %version.abbreviation%  Store book/chapter/verse data;
 *
 *    Each verse will be a single document of the form:
 *      { _id     : %book-abbreviation%.%chapter#%.%verse#%
 *        markup  : [
 *          { %type%: %type-specific-data% },
 *          ...
 *        ],
 *        text    : Full text of this verse {String};
 *      }
 */
const Path          = require('path');
const Fs            = require('fs/promises');
const Yargs         = require('yargs');
const Versions      = require('../versions');
const Usage         = require('../lib/usage');
const Books         = require('../lib/books');
const load_config   = require('../lib/load_config');
const mongo_connect = require('../lib/mongo');
const Refs          = require('../lib/refs');

const yargs	= Yargs
	.usage('Fetch and load <vers> [<ref>]')
  .positional('vers', {
    describe: 'The desired version',
    type    : 'string',
  })
  .positional('ref', {
    describe: 'A filter to load just a specific BOK[.chap#[.verse#]]',
    type    : 'string',
	})
  .options({
    c: {
      alias   : 'config',
      describe: 'A YAML configuration file',
      default : Path.resolve(
                  Path.join( __dirname, 'config.yaml' )
                ),
      type    : 'string',
    },
    v: {
      alias   : 'verbosity',
      describe: 'Increase debug verbosity',
      count   : true,
    },
    h: { alias : [ '?', 'help' ] },
  })
  .help();

main().catch(err => { console.error('*** main:', err) });

/****************************************************************************
 * async main
 *
 */
async function main() {
  const args        = yargs.parse();
  const config      = load_config( args );
  const [vers, ref] = args._;

  let   ref_filter;
  if (vers == null) { Usage.yargs( yargs ) }
  args.vers           = vers;
  args.returnVersion  = true;

  if (ref != null) {
    const [ only_bk, only_ch, only_vs ]  = ref.split(/[ :\.]+/);

    const book = Books.getBook( only_bk );
    if (book) {
      if (only_ch) {
        ref_filter = Refs.sortable( book.abbr, only_ch, only_vs );

      } else {
        ref_filter = book.abbr;

      }

      // Pass this in 'args'
      args.ref_filter = ref_filter;
    }
  }

  /*
  console.log('>>> Version: %s %s', vers, (ref_filter || ''));
  return;
  // */

  console.log('>>> Prepare version: %s %s', vers, (ref_filter || ''));
  const prepareConfig = { ...args };
  prepareConfig.verbosity = 0;
  prepareConfig.force     = false;

  args.version = await Versions.prepare( prepareConfig );

  const mongo = await mongo_connect( config.mongodb );

  // Access the collection for this version
  const abbrev  = args.version.abbreviation;

  // Access/create the collection for this version
  args.col = {
    versions: mongo.collections.versions,
    version : mongo.db.collection( abbrev ),
  };

  _store_version( args )
    .catch(err => {
      console.error('***', err);
    })
    .finally(() => {
      mongo.client.close();
    });
}

/****************************************************************************
 * Private helpers {
 *
 */

/**
 *  Store the identified version in the database.
 *
 *  @method _store_version
 *  @param  config          Store configuration {Object};
 *  @param  config.vers     The requested version {String};
 *  @param  [config.ref_filter = null]
 *                          Any requested reference filter 'BOK[.ccc]'
 *                          {String};
 *  @param  [config.force = false]
 *                          If truthy, fetch even if the data is already cached
 *                          {Boolean};
 *  @param  [config.verbosity = 0]
 *                          Verbosity level {Number};
 *  @param  config.version  The meta-data of the target version {Version};
 *  @param  config.col.versions
 *                          A connection to the mongodb collection for the
 *                          versions metadata {Collection};
 *  @param  config.col.version
 *                          A connection to the mongodb collection for the
 *                          target version {Collection};
 *
 *  Iterate over all files in the cache directory for this version.
 *  These represent the version metadata along with a database-ready form of
 *  each book for that version.
 *
 *  Store each of these in the database.
 *
 *  @return A promise for results {Promise};
 *          - on success, true {Boolean};
 *          - on failure, and error {Error};
 *  @private
 */
async function _store_version( config ) {
  const version     = config.version;
  const ABBR        = version.abbreviation;
  const cache_dir   = version._cache.prepare;
  const ref_filter  = config.ref_filter;

  console.log('>>> Store version: %s %s from %s ...',
              ABBR,
              (ref_filter ? `[ ${ref_filter} ]` : ''),
              cache_dir);

  // Iterate over all files in the cache directory
  const files = await Fs.readdir( cache_dir );

  for( const file of files ) {
    if (! file.endsWith('.json')) {
      if (config.verbosity > 1) {
        console.warn('=== Skip non-json file [ %s ]', file);
      }
      continue;
    }

    // Read the JSON data
    const name      = file.replace(/.json$/, '');
    const jsonPath  = Path.join( cache_dir, file );
    const jsonData  = await Fs.readFile( jsonPath );
    const json      = JSON.parse( jsonData );

    if (file === 'version.json') {
      // Store the version metadata
      console.log('>>> Update %s version metadata ...', ABBR);
      await _store_version_metadata( config, json );

    } else if (ref_filter == null || ref_filter.startsWith( name )) {
      // Store this version book
      await _store_version_book( config, name, json );

    } else if (config.verbosity > 1) {
      console.log('=== Skip   %s.%s: filtered out', ABBR, name);
    }
  }

  return true;
}

/**
 *  Add/Update top-level metadata about the given version.
 *  @method _store_version_metadata
 *  @param  config          Store configuration {Object};
 *  @param  [config.verbosity = 0]
 *                          Verbosity level {Number};
 *  @param  config.version  The meta-data of the target version {Version};
 *  @param  config.col.versions
 *                          A connection to the mongodb collection for the
 *                          versions metadata {Collection};
 *  @param  config.col.version
 *                          A connection to the mongodb collection for the
 *                          target version {Collection};
 *  @param  version         The version meta-data to store {Object};
 *
 *  @return A promise for results {Promise};
 *  @private
 */
async function _store_version_metadata( config, version ) {
  const outVers = {};

  // Exclude "private" keys beginning with '_'
  Object.keys( version ).forEach( key => {
    if (key == null || key[0] === '_')  { return }
    outVers[ key ] = version[ key ];
  });

  const query   = { id: version.id };
  const update  = { $set: { ...outVers } };
  const opts    = { upsert: true };

  await config.col.versions.updateOne(query, update, opts);
}

/**
 *  Write data for a single book to the database.
 *
 *  @method _store_version_book
 *  @param  config          Store configuration {Object};
 *  @param  config.col.versions
 *                          A connection to the mongodb collection for the
 *                          versions metadata {Collection};
 *  @param  config.col.version
 *                          A connection to the mongodb collection for the
 *                          target version {Collection};
 *  @param  [config.ref_filter = null]
 *                          Any requested reference filter 'BOK[.ccc]'
 *                          {String};
 *  @param  [config.verbosity = 0]
 *                          Verbosity level {Number};
 *  @param  name            The (abbreviated) name of this book {String};
 *  @param  book            The parsed version data for the current book
 *                          {Object};
 *
 *  The parsed version data ( `book` ) should have the form:
 *    {
 *      'BOK.ccc.vvv': {
 *        markup: [ .... ],
 *        text  : [ .... ],
 *      },
 *      ...
 *    }
 *
 *  @return A promise for results {Promise};
 *  @private
 */
async function _store_version_book( config, name, book ) {
  const version     = config.version;
  const col         = config.col.version;
  const ref_filter  = config.ref_filter;
  const ABBR        = version.abbreviation;
  const bulkWrite   = [];
  let   docs_total  = 0;

  for (let ref_id in book) {
    docs_total++;

    if (ref_filter && !ref_id.startsWith( ref_filter )) {
      if (config.verbosity > 1) {
        console.log('=== Skip   %s.%s: filtered out [ %s ]',
                    ABBR, ref_id, ref_filter);
      }
      continue;
    }

    const data  = book[ ref_id ];
    const doc   = { _id: ref_id, ...data };

    bulkWrite.push( {
      updateOne: {
        filter: { _id: doc._id },
        update: {$set: doc},
        upsert : true
      }
    });
  }

  const totalStr    = _format_num( docs_total, 5 );
  const includeStr  = _format_num( bulkWrite.length, 5 );

  process.stdout.write(
    `>>>>> Bulk write ${includeStr} / ${totalStr} entries `
    +     `for ${ABBR}.${name} ...` );

  try {
    const res = await col.bulkWrite( bulkWrite, { ordered : false } );

    process.stdout.write(
        '. m/u/i[ '
        +   _format_num( res.matchedCount,  5 ) +', '
        +   _format_num( res.modifiedCount, 5 ) +', '
        +   _format_num( res.upsertedCount, 5 ) +' ]\n'
    );

  } catch(ex) {
    process.stdout.write('\n');
    console.error('****** Bulk write error:', ex);

    throw ex;
  }
}

/**
 *  Given a number, convert it to a locale-specific string right aligned to the
 *  given field size.
 *  @method _format_num
 *  @param  num             The target number {Number};
 *  @param  [field_size=0]  If provides, righth align to the given field size
 *                          {Number};
 *
 *  @return The formatted string {String};
 *  @private
 */
function _format_num( num, field_size=0 ) {
  const str = num.toLocaleString();

  if (field_size > 0) {
    return str.padStart( field_size, ' ' );
  }

  return str;
}

/* Private helpers }
 ****************************************************************************/

// vi: ft=javascript
