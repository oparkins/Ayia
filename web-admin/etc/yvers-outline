#!/usr/bin/env node
const Yargs   = require('yargs');
const Books   = require('../lib/books');
const Yvers   = require('../versions/yvers');
const Cheerio = require('cheerio');
const sprintf = require('sprintf-js').sprintf;
const Usage   = require('../lib/usage');
const yargs   = Yargs
  .usage('Parse the extracted <vers> data into a human readable HTML outline '
          +     'optionally limited to a <ref>')
  .positional('vers', {
    describe: 'The desired version',
    type    : 'string',
  })
  .positional('ref', {
    describe: 'An optional reference limit [book[.chapter[.verse]]',
    type    : 'string',
  })
  .options({
    f: {
      alias   : 'force',
      describe: 'Force (re)creation of the JSON',
      default : false,
      type    : 'boolean',
    },
    v: {
      alias   : 'verbosity',
      describe: 'Increase debug verbosity',
      count   : true,
    },
    h: { alias : [ '?', 'help' ] },
  })
  .help();

main().catch(err => { console.error('*** main:', err) });

/****************************************************************************
 * async main
 *
 */
async function main() {
  const args        = yargs.parse();
  const [vers,ref]  = args._;
  let   ref_filter;

  if (vers == null) { Usage.yargs( yargs ) }
  args.vers = vers;

  if (ref) {
    const [ only_bk, only_ch, only_vs ]  = ref.split(/[ :\.]+/);

    const book = Books.getBook( only_bk );
    if (book) {
      ref_filter = book.abbr;

      if (only_ch) {
        ref_filter += `.${only_ch}`;
        if (only_vs)  { ref_filter += `.${only_vs}` }
      }
    }
  }

  if (args.verbosity) {
    console.log('>>> Version: %s %s', vers, (ref_filter || ''));
  }

  args.returnVersion = true;

  const version = await Yvers.extract.version( args );

  Object.entries(version.books).forEach( ([key,val]) => {
    _parseBook( key, val, ref_filter );
  });
}

/****************************************************************************
 * Private helpers {
 *
 */

/**
 *  Fetch the specified attribute from the given element.
 *  @method _getAttr
 *  @param  el    The target element {Cheerio};
 *  @param  attr  The target attribute {String};
 *
 *  @return The value of the attribute {String | undefined};
 *  @private
 */
function _getAttr( el, attr ) {
  if (el.attribs == null) { return }

  return el.attribs[ attr ];
}

/**
 *  Fetch an array of CSS classes for the given element.
 *  @method _getClasses
 *  @param  el  The target element {Cheerio};
 *
 *  @return The array of CSS classes {Array};
 *  @private
 */
function _getClasses( el ) {
  const attrCls = _getAttr( el, 'class' ) || '';
  const classes = attrCls.split(/\s+/).filter( str => str.length > 0 );

  return classes;
}

/**
 *  Parse a single book.
 *  @method _parseBook
 *  @param  abbrev        The book abbreviation {String};
 *  @param  chapters      The chapter data for this book {Object};
 *  @param  [ref_filter]  If provided, only present books, chapters, and verses
 *                        that match the filter ( BOK[.CHAPTER[.VERSE]] )
 *                        {String};
 *
 *  @return void
 *  @private
 */
function _parseBook( abbrev, chapters, ref_filter = null ) {
  const [ only_book, only_ch, only_vs ] = (typeof(ref_filter) === 'string'
                                            ? ref_filter.split('.')
                                            : []);
  if (only_book && only_book !== abbrev) { return }

  let filter  = null;
  if (only_book) {
      filter = only_book;

      if (only_ch) {
        filter += `.${only_ch}`;
        if (only_vs)  { filter += `.${only_vs}([+]|$)` }
        else          { filter += '.[0-9]' }
      }

      filter = new RegExp( filter.replaceAll('.', '\\.'), 'i' );
  }

  /*
  console.log('_parseBook( %s ): ref_filter[ %s ] => '
              +   'only_book[ %s ], only_ch[ %s ], only_vs[ %s ] => %s',
              abbrev, ref_filter, only_book, only_ch, only_vs);
  // */

  Object.entries( chapters ).forEach( ([chp, lines]) => {
    if (only_ch && only_ch != chp) { return }

    const $         = Cheerio.load( lines.join( '' ) );
    const $chapter  = $('.chapter');
    const usfm      = $chapter.attr('data-usfm');

    console.log('{ chapter: %s [ %s ]', chp, usfm);
    $chapter.children().each( (idex, el) => {
      _parseBlock( $, el );
    });
    console.log('}');

    console.log('=====================================================');
  });
}

/**
 *  Generate a pluralized version of the given word based upon the provided
 *  count and plural suffix.
 *  @method _pluralize
 *  @param  count     The item count {Number};
 *  @param  singular  The singular version {String};
 *  @param  plural    The plural version {String};
 *
 *  @return The pluralized word {String};
 *  @private
 */
function _pluralize( count, singular, plural ) {
  return (count === 1 ? singular : plural);
}

/**
 *  Parse a block-level element.
 *  @method _parseBlock
 *  @param  $               The top-level Cheerio instance {Cheerio};
 *  @param  el              The target HTML element {Object};
 *
 *  @return void
 *  @private
 */
function _parseBlock( $, el ) {
  const classes   = _getClasses( el );
  const children  = $(el).children();

  if (children.length < 1) {
    console.log('  { %s.%s: %s }',
                el.name, classes.join('.'), $(el).text() );

  } else {
    console.log('  { %s.%s:', el.name, classes.join('.'));

    // Recursively parse all children
    $(el).children().each( (jdex, ch) => {
      _parseEl( $, ch );
    });

    console.log('  }');
  }
}

/**
 *  Parse a single line of chapter HTML.
 *  @method _parseEl
 *  @param  $               The top-level Cheerio instance {Cheerio};
 *  @param  el              The target HTML element {Object};
 *  @param  [indent = 4 ]   The number of characters to indent each output line
 *                          {NUmber};
 *
 *  @return void
 *  @private
 */
function _parseEl( $, el, indent=4 ) {
  const classes   = _getClasses( el );
  const cls0      = (classes.length > 0 && classes[0]);

  const $el       = $(el);
  const oPad      = ' '.padStart( indent,     ' ' );
  const label     = (cls0 || el.type);
  const children  = el.children || [];  //$el.children();

  if (children.length < 1) {
    // NO children
    console.log( sprintf('%s%s:[%s]', oPad, el.type, $el.text()) );
    return;
  }

  const usfm  = _getAttr( el, 'data-usfm' );
  if (usfm) {
    // This element has a 'data-usfm' attribute and so is related to a verse.
    if (classes.length > 1) {
      console.log('%s%s.%s:%s [ %s ]: {',
                  oPad, el.name, label, usfm,
                  classes.slice(1).join(', '));  // }
    } else {
      console.log('%s%s.%s:%s: {', oPad, el.name, label, usfm); // }
    }

  } else {
    console.log('%s%s.%s: {',
                 oPad, el.name, classes.join('.'));
  }

  // Recursively parse all children
  children.forEach( (ch, jdex) => {
    _parseEl( $, ch, indent+2 );
  });

  console.log('%s}', oPad);
}

/* Private helpers }
 ****************************************************************************/

// vi: ft=javascript
