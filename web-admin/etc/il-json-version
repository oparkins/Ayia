#!/usr/bin/env node
/**
 *  Fetch a version and convert all data to JSON format.
 *
 */
const Fs          = require('fs');
const Readline    = require('readline');
const Yargs       = require('yargs');
const Interlinear = require('../lib/interlinear');

const yargs	= Yargs
	.usage('Generate JSON for <vers>')
  .positional('vers', {
    describe: 'The desired version',
    type    : 'string',
  })
  .options({
    f: {
      alias   : 'force',
      describe: 'Force (re)creation of the JSON',
      default : false,
      type    : 'boolean',
    },
    v: {
      alias   : 'verbosity',
      describe: 'Increase debug verbosity',
      count   : true,
    },
    h: { alias : [ '?', 'help' ] },
  })
  .help();

async function main() {
  const args    = yargs.parse();
  const [vers]  = args._;

  if (vers == null) { _usage( yargs ) }

  args.forceJson = args.force;
  args.force     = false;

  const version = await Interlinear.toJson( vers, args );

  console.log('>>> JSON cached to: %s', version.cache.json);
}

main().catch(err => { console.error('*** main:', err) });

/****************************************************************************
 * Private helpers {
 *
 */

/**
 *  Present usage information and exit.
 *  @method _usage
 *  @param  yaargs  The configured parser {Yargs};
 *
 *  @return void  (exits the process)
 *  @private
 */
function _usage( yargs ) {
	yargs.showHelp();

  process.exit(-1);
}

/**
 *  Open and output the content of the given file.
 *  @method _open_and_print
 *  @param  path    The path to the target file {String};
 *
 *  @return A promise for results {Promise};
 *          - on success, the number of lines in the file {Number};
 *          - on failure, an error {Error};
 *  @private
 */
function _open_and_print( path ) {
  return new Promise((resolve, reject) => {
    const inStream  = Fs.createReadStream( path );
    const rl        = Readline.createInterface({
      input     : inStream,
      crlfDelay : Infinity,
    });

    let numLines  = 0;

    rl.on('line', (line) => {
      numLines++;

      console.log( line );
    });

    rl.on('error', (err) => {
      rl.close();
      return reject( err );
    });

    rl.on('close', () => {
      console.log();
      return resolve( numLines );
    });
  });
}

/* Private helpers }
 ****************************************************************************/

// vi: ft=javascript
