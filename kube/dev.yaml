# This requires manual creation of:
# - LongHorn volume:
#   - name              : lh-dev-app  (volumeHandle)
#   - Size              : 5Gi
#   - Number of Replicas: 1
#
# - Attach the LongHorn volume to our primary k8s node
#
---
apiVersion: v1
kind: PersistentVolume
metadata:
  annotations:
    field.cattle.io/description: Persistent Volume for  app development
  finalizers:
    - kubernetes.io/pv-protection
  name: pv-dev-app
spec:
  accessModes:
    - ReadWriteOnce
  capacity:
    storage: 5Gi
  csi:
    driver: driver.longhorn.io
    volumeAttributes:
      numberOfReplicas: '1'
      size: 5Gi
      staleReplicaTimeout: '20'
    volumeHandle: lh-dev-app
  persistentVolumeReclaimPolicy: Retain
  storageClassName: longhorn
  volumeMode: Filesystem
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  annotations:
    volume.beta.kubernetes.io/storage-provisioner: driver.longhorn.io
    volume.kubernetes.io/storage-provisioner: driver.longhorn.io
  finalizers:
    - kubernetes.io/pvc-protection
  name: pvc-dev-app
  namespace: default
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 5Gi
  storageClassName: longhorn
  volumeMode: Filesystem
  volumeName: pv-dev-app
---
apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    deployment.kubernetes.io/revision: '1'
    field.cattle.io/description: Developer environment (Nodejs, Rust, Tauri)
  labels:
    workload.user.cattle.io/workloadselector: apps.deployment-default-dev
  name: dev
  namespace: default
spec:
  progressDeadlineSeconds: 600
  replicas: 1
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      workload.user.cattle.io/workloadselector: apps.deployment-default-dev
  strategy:
    rollingUpdate:
      maxSurge: 25%
      maxUnavailable: 25%
    type: RollingUpdate
  template:
    metadata:
      labels:
        workload.user.cattle.io/workloadselector: apps.deployment-default-dev
      namespace: default
    spec:
      affinity: {}
      containers:
        #- image: node:21.6.1-bullseye-slim
        - image: node:21.6.1-bookworm-slim
          imagePullPolicy: IfNotPresent
          name: main-container
          command:
            - /bin/bash
            - "-c"
            - |
              set -e
              function log() {
                echo "$(date '+%Y-%m-%dT%H:%M:%S') - dev - $*"
              }
              function terminate() {
                log "Stopping"
                exit 1
              }
              trap terminate SIGTERM SIGQUIT

              #if [ ! -f /root/.initialized ]; then
              #  apt update -y
              #  apt upgrade -y
              #  apt install -y \
              #    vim \
              #    git \
              #    libwebkit2gtk-4.0-dev \
              #    build-essential \
              #    curl \
              #    wget \
              #    file \
              #    libssl-dev \
              #    libgtk-3-dev \
              #    libayatana-appindicator3-dev \
              #    librsvg2-dev
              #
              #  curl --proto '=https' --tlsv1.2 https://sh.rustup.rs -sS \
              #    -o rustup.sh
              #  sh rustup.sh -y
              #  source $HOME/.cargo/env
              #
              #  touch /root/.initialized
              #
              #  #cd /app
              #  #npm create svelte@latest
              #  #cd Ayia
              #  #npm install
              #  #npm install --save-dev @sveltejs/adapter-static
              #  cat <<EOF
              #import adapter from '@sveltejs/adapter-static' // This was changed from adapter-auto
              #import { vitePreprocess } from '@sveltejs/vite-plugin-svelte'
              #
              #/** @type {import('@sveltejs/kit').Config} */
              #const config = {
              #  // Consult https://kit.svelte.dev/docs/integrations#preprocessors
              #  // for more information about preprocessors
              #  preprocess: vitePreprocess(),
              #
              #  kit: {
              #    adapter: adapter(),
              #  },
              #}
              #
              #export default config
              #EOF
              #
              # # Update src/routes/+layout.js
              # # export const prerender = true
              # # export const ssr = false
              #
              # npm install --save-dev @tauri-apps/cli
              #
              # # Update package.json
              # # "scripts": {
              # #  "tauri": "tauri"
              # #}
              #
              # npm run tauri init
              #fi

              while [ 1 ]; do
                sleep 300 &
                wait $!
              done
          ports:
            - containerPort: 80
              name: http
              protocol: TCP
            - containerPort: 443
              name: https
              protocol: TCP
          resources: {}
          securityContext:
            allowPrivilegeEscalation: false
            privileged: false
            readOnlyRootFilesystem: false
            runAsNonRoot: false
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
            - mountPath: /app
              name: vol-dev-app
      #initContainers:
      #  - image: node:21.6.1-bookworm-slim
      #    imagePullPolicy: IfNotPresent
      #    name: init-container
      #    command:
      #      - /bin/bash
      #      - "-c"
      #      - |
      #        apt upgrade -y
      #        apt install -y \
      #          libwebkit2gtk-4.0-dev \
      #          build-essential \
      #          curl \
      #          wget \
      #          file \
      #          libssl-dev \
      #          libgtk-3-dev \
      #          libayatana-appindicator3-dev \
      #          librsvg2-dev
      #        curl --proto '=https' --tlsv1.2 https://sh.rustup.rs -sS | sh
      #    resources: {}
      #    securityContext:
      #      allowPrivilegeEscalation: false
      #      privileged: false
      #      readOnlyRootFilesystem: false
      #      runAsNonRoot: false
      #    terminationMessagePath: /dev/termination-log
      #    terminationMessagePolicy: File
      dnsPolicy: ClusterFirst
      restartPolicy: Always
      schedulerName: default-scheduler
      securityContext: {}
      terminationGracePeriodSeconds: 30
      volumes:
        - name: vol-dev-app
          persistentVolumeClaim:
            claimName: pvc-dev-app
---
apiVersion: v1
kind: Service
metadata:
  annotations:
    field.cattle.io/targetWorkloadIds: '["default/dev"]'
  name: dev
  namespace: default
spec:
  clusterIP: 10.43.100.7
  clusterIPs:
    - 10.43.100.7
  internalTrafficPolicy: Cluster
  ipFamilies:
    - IPv4
  ipFamilyPolicy: SingleStack
  ports:
    - name: http
      port: 80
      protocol: TCP
      targetPort: 80
    - name: https
      port: 443
      protocol: TCP
      targetPort: 443
  selector:
    workload.user.cattle.io/workloadselector: apps.deployment-default-dev
  sessionAffinity: None
  type: ClusterIP
