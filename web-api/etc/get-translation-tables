#!/usr/bin/env node
const http = require('https');
const fs = require('fs');
const execSync = require('child_process').execSync;
const readline = require('readline');

// Constants used later
const TABLES_URL = "https://bereanbible.com/bsb_tables.xlsx"
const TABLES_FILE = "bsb_tables.xlsx"

// Check for dependencies like libreoffice
try {
    execSync('soffice --version',
        function (error, stdout, stderr) { }
    );
} catch {
    console.error('Please install LibreOffice');
    return
}


/* Download the translation table document, if required */
fs.stat("cache/" + TABLES_FILE, function(err, stat) {
    if (err == null) {
        console.log("Using translation tables found in cache");
    } else {
        console.log("Downloading translation tables")
        const file = fs.createWriteStream("cache/" + TABLES_FILE);
        const request = http.get(TABLES_URL, function(response) {
            response.pipe(file);
            // after download completed close filestream
            file.on("finish", () => {
                file.close();
                console.log("Download Completed");
            });
        });
    }
});



fs.stat("cache/bsb_tables-biblosinterlinear96.csv", function(err, stat) {
    if (err == null) {
        console.log("Using CSV-transformed translation tables")
    } else {
        console.log("Converting translation tables to CSV")
        // Params located at: https://help.libreoffice.org/latest/en-US/text/shared/guide/csv_params.html
        execSync('soffice --convert-to csv:"Text - txt - csv (StarCalc)":44,34,UTF8,0,,0,true,false,false,false,false,5 ' + TABLES_FILE,
            { cwd: "./cache"},
            function (error, stdout, stderr) {
                console.log('stdout: ' + stdout);
                console.log('stderr: ' + stderr);
                if (error !== null) {
                    console.log('exec error: ' + error);
                }
        });
    }
});

const fileStream = fs.createReadStream("cache/bsb_tables-biblosinterlinear96.csv");

const rl = readline.createInterface({
    input: fileStream,
    crlfDelay: Infinity
});

var header = [];
var amount_of_lines_to_ignore = 1;

/**
 * Convert a CSV line ('asd',asdf,'a sdf',...) to an array, (['asd', 'asdf', 'a
 * sdf']). Useful to later zipping to the header line to make a dictionary.
 * 
 * @param line The string that contains the CSV line
 */
function csv_line_to_array(line) {

    // Process character by character
    res = []
    value = "";
    var inside_a_value = false;
    for (c of line) {
        if (c === '\"') {

            inside_a_value = !inside_a_value;

            // We are at the end of an entry, let's push it on our array
            //if ( value !== "" ) {
            //    res.push( value )
            //    value = ""
            //}

        } else if ( c === ',' ) { 

            if ( !inside_a_value ) {
                res.push( value )
                value = ""
            } else { // Since value has values, the comma is part of the actual text.
                value += c;
            }

        } else { //Nothing special, just add the character to our temp value
            value += c;
        }

    }

    res.push( value )


    return res
}

const outputFilestream = fs.createWriteStream("cache/interlinear.json");

// Start our array of verses...
outputFilestream.write("[")
var first_object = true;
rl.on('line', (line) => {

    if (amount_of_lines_to_ignore > 0) {
        amount_of_lines_to_ignore--;
        return;
    }

    if (header.length === 0) {
        header = csv_line_to_array(line)
    } else {
        line_array = csv_line_to_array(line)

        jsonObj = {}
        
        for (var i in header) {
            jsonObj[header[i]] = line_array[i]
        }

        if (!first_object) {
            outputFilestream.write(',\n')
        } else {
            first_object = false
            outputFilestream.write('\n')
        }
        outputFilestream.write(JSON.stringify(jsonObj))
    }
});



rl.on('close', () => {
    console.log('Finished parsing the csv file.');
    outputFilestream.write("]")

});