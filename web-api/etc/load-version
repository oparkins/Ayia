#!/usr/bin/env node
/**
 *  Fetch a version, convert it to JSON format, and load into a mongodb
 *  database.
 *
 *  Two collections will be used:
 *    versions                Store metadata about the specific version;
 *    %version.abbreviation%  Store book/chapter/verse data;
 *
 *    Each verse will be a single document of the form:
 *      { _id     : %book-abbreviation%.%chapter#%.%verse#%
 *        markup  : [
 *          { %type%: %type-specific-data% },
 *          ...
 *        ],
 *        text    : Full text of this verse {String};
 *      }
 */
const Path          = require('path');
const Yargs         = require('yargs');
const Bible         = require('../lib');
const load_config   = require('../lib/load_config');
const mongo_connect = require('../lib/mongo');

const yargs	= Yargs
	.usage('Fetch and load <vers> [<ref>]')
  .positional('vers', {
    describe: 'The desired version',
    type    : 'string',
  })
  .positional('ref', {
    describe: 'A filter to load just a specific BOK[.chap#[.verse#]]',
    type    : 'string',
	})
  .options({
    c: {
      alias   : 'config',
      describe: 'A YAML configuration file',
      default : Path.resolve(
                  Path.join( __dirname, 'config.yaml' )
                ),
      type    : 'string',
    },
    v: {
      alias   : 'verbosity',
      describe: 'Increase debug verbosity',
      count   : true,
    },
    h: { alias : [ '?', 'help' ] },
  })
  .help();

async function main() {
  const args        = yargs.parse();
  const config      = load_config( args );
  const [vers, ref] = args._;

  let   ref_filter;
  if (vers == null) { _usage( yargs ) }

  const mongo = await mongo_connect( config.mongodb );
  if (ref != null) {
    const [ only_bk, only_ch, only_vs ]  = ref.split(/[ :\.]+/);

    const book = Bible.getBook( only_bk );
    if (book) {
      ref_filter = book.abbr;

      if (only_ch) {
        ref_filter += `.${only_ch}`;
        if (only_vs)  { ref_filter += `.${only_vs}` }
      }
    }
  }
  /*
  console.log('>>> Version: %s %s', vers, (ref_filter || ''));
  return mongo.client.close();
  // */

  console.log('>>> Fetch version: %s %s', vers, (ref_filter || ''));
  Bible.getVersion( vers )
    .then( version => {
      console.log('>>>> Convert %s data to JSON ...', version.abbreviation);
      const json  = Bible.toJson( version, ref_filter );

      console.log('>>>> Generate %s range data ...', version.abbreviation);
      version.books = _generate_ranges( json );

      /*
      console.log('=== %s version.books:',
                  version.abbreviation, _inspect( version.books ));
      console.log('=== %s json.books:',
                  version.abbreviation, _inspect( json.books, 8 ));
      throw new Error('STOP');
      // */

      console.log('>>>> Update %s metadata ...', version.abbreviation);
      return _store_version_metadata( mongo.collections.versions, version )
                .then( res => {
                  return [version, json];
                } );
    })
    .then( ([version,json]) => {
      // Access the collection for this version
      const abbrev  = version.abbreviation;
      const col     = mongo.db.collection( abbrev );

      return _store_version_books( col, version, json );
    })
    .catch(err => {
      console.error('***', err);
    })
    .finally(() => {
      mongo.client.close();
    });
}

main().catch(console.dir);

/****************************************************************************
 * Private helpers {
 *
 */

/**
 *  Add/Update top-level metadata about the given version.
 *  @method _store_version_metadata
 *  @param  col     The database 'versions' collection {Collection};
 *  @param  version The version meta-data {Object};
 *
 *  @return A promise for results {Promise};
 *  @private
 */
async function _store_version_metadata( col, version ) {
  const outVers = { ...version };

  const query   = { id: version.id };
  const update  = { $set: { ...outVers } };
  const opts    = { upsert: true };

  await col.updateOne(query, update, opts);
}

/**
 *  Generate ranges for books (chapter#) and chapters (verse#).
 *  @method _generate_ranges
 *  @param  version   The full version meta-data generated via Bible.toJson()
 *                    {Object};
 *
 *  @return Range data for this version {Object};
 *            {
 *              BOK: {
 *                id: BOK,
 *                # chapter count = BOK.chapter.length - 1
 *                verses: [
 *                  0,        # No chapter 0
 *                  {Number}, # chapter 1 verse count
 *                  {Number}, # chapter 2 verse count
 *                  ...
 *                ]
 *              ],
 *              ...
 *            }
 *  @private
 */
function _generate_ranges( version ) {
  const ranges  = {};

  /*
  console.log('_generate_ranges(): version.books:', _inspect(version.books));
  // */

  for (let BOK in version.books) {
    const book    = version.books[ BOK ];
    const bkRange = { verses:[ 0 ] };

    /*
    console.log('_generate_ranges(): BOK[ %s ], book:', BOK, _inspect(book));
    // */

    for (let chpId in book.chapters) {
      const chp     = book.chapters[ chpId ];
      const chpNum  = parseInt( chpId );
      const vrsCnt  = chp.verse_count;

      /*
      console.log('_generate_ranges(): %s.%s/%s : %d',
                  BOK, chpId, chpNum, vrsCnt);
      // */

      if (vrsCnt == null || vrsCnt < 1) {
        /*
        console.warn('*** _generate_ranges(): %s.%s : no verses[ %s ]',
                      BOK, chpId, vrsCnt);
        // */
        continue;
      }
      if (Number.isNaN( chpNum )) {
        /*
        console.warn('*** _generate_ranges(): %s.%s : chpId is not a number',
                      BOK, chpId);
        // */
        continue;
      }

      bkRange.verses[ chpNum ] = vrsCnt;
    }

    ranges[ BOK ] = bkRange;
  }

  return ranges;
}

/**
 *  Write version data to the database.
 *  @method _store_version_books
 *  @param  col     The database collection for the target version
 *                  {Collection};
 *  @param  version The version meta-data {Object};
 *  @param  json    The parsed version data {Object};
 *
 *  The parsed version data should have the form:
 *    {
 *      abbreviation: {String},
 *      ...
 *      books: {
 *        %abbrev: {
 *          metadata: { ... },
 *          chapters: {
 *            %chapter#%: {
 *              verse_count:  {Number};
 *              label:        {String};
 *              verses: {
 *                %verse#%: [ // markup data
 *                  { %type%: %type-specific-data% },
 *                  ...
 *                ],
 *                ...
 *              },
 *              fullText: {
 *                %verse#%: {String},
 *                ...
 *              },
 *            },
 *            ...
 *            // And optionally introduction(s)
 *            INTRO1: {
 *              content: [
 *              ]
 *            },
 *          }
 *        },
 *        ...
 *      }
 *    }
 *
 *  @return A promise for results {Promise};
 *  @private
 */
async function _store_version_books( col, version, json ) {
  const abbrev  = version.abbreviation;

  console.log('>>>> Update book information for %s ...', abbrev);
  for (let name in json.books ) {
    const book  = json.books[ name ];

    await _store_version_book( col, abbrev, name, book );
  }
}

/**
 *  Write data for a single book to the database.
 *  @method _store_version_book
 *  @param  col     The database collection for the target version
 *                  {Collection};
 *  @param  vers    The name of the version {String};
 *  @param  name    The (abbreviated) name of this book {String};
 *  @param  book    The parsed version data for the current book {Object};
 *
 *  The parsed version data should have the form:
 *    {
 *      metadata: { ... },
 *      chapters: {
 *        %chapter#%: {
 *          verse_count:  {Number};
 *          label:        {String};
 *          verses: {
 *            %verse#%: [ // markup data
 *              { %type%: %type-specific-data% },
 *              ...
 *            ],
 *            ...
 *          },
 *          fullText: {
 *            %verse#%: {String},
 *            ...
 *          },
 *        },
 *        ...
 *      }
 *    }
 *
 *  @return A promise for results {Promise};
 *  @private
 */
async function _store_version_book( col, vers, name, book ) {
  const bulkWrite = [];

  //const updateOpts  = { upsert: true };

  for (let chpId in book.chapters) {
    const chap  = book.chapters[chpId];

    if (chpId.startsWith('INTRO') && chap.content != null) {
      // Add this as an intro
      const ref_id  = _generate_ref_id( name, chpId );
      const doc     = { _id:ref_id, content: chap.content };

      bulkWrite.push( {
        updateOne: {
          filter: { _id: doc._id },
          update: {$set: doc},
          upsert : true
        }
      });
    }

    for (let vsId in chap.verses) {
      const markup  = chap.verses[vsId];
      const text    = chap.fullText[vsId];
      const ref_id  = _generate_ref_id( name, chpId, vsId );
      const doc     = { _id:ref_id, text, markup };

      bulkWrite.push( {
        updateOne: {
          filter: { _id: doc._id },
          update: {$set: doc},
          upsert : true
        }
      });
    }
  }

  process.stdout.write(
    `>>>>> Bulk write ${_format_num(bulkWrite.length, 5)} entries `
    +     `for ${vers}.${name} ...` );

  try {
    const res = await col.bulkWrite( bulkWrite, { ordered : false } );

    process.stdout.write(
        '. m/u/i[ '
        +   _format_num( res.matchedCount,  5 ) +', '
        +   _format_num( res.modifiedCount, 5 ) +', '
        +   _format_num( res.upsertedCount, 5 ) +' ]\n'
    );

  } catch(ex) {
    process.stdout.write('\n');
    console.error('****** Bulk write error:', ex);

    throw ex;
  }
}

/**
 *  Generate a sortable id for the given book, chapter, and verse.
 *  @method _generate_ref_id
 *  @param  book          The name of the book {String};
 *  @param  chapter       The chapter id {String};
 *  @param  [verse=null]  Optional verse id {String};
 *
 *  @return The sortable id {String};
 *  @private
 */
function _generate_ref_id( book, chapter, verse=null ) {
  const chpNum  = String(chapter).padStart(3, '0');
  let   id      = `${book}.${chpNum}`;

  if (verse != null) { 
    const vrsNum  = String(verse).padStart(3, '0');
    id += `.${vrsNum}`;
  }

  return id;
}

/**
 *  Present usage information and exit.
 *  @method _usage
 *  @param  yaargs  The configured parser {Yargs};
 *
 *  @return void  (exits the process)
 *  @private
 */
function _usage( yargs ) {
	yargs.showHelp();

  process.exit(-1);
}

/**
 *  Given a number, convert it to a locale-specific string right aligned to the
 *  given field size.
 *  @method _format_num
 *  @param  num             The target number {Number};
 *  @param  [field_size=0]  If provides, righth align to the given field size
 *                          {Number};
 *
 *  @return The formatted string {String};
 *  @private
 */
function _format_num( num, field_size=0 ) {
  const str = num.toLocaleString();

  if (field_size > 0) {
    return str.padStart( field_size, ' ' );
  }

  return str;
}

/*
function _inspect( obj, depth=4 ) {
  const Util  = require('util');
  const opts  = {
    showHidden      : false,
    depth           : depth,
    colors          : false,  //true,
    maxStringLength : 120,
    breakLength     : 80,
    compact         : 10,
  };

  return Util.inspect( obj, opts );
}
// */

/* Private helpers }
 ****************************************************************************/

// vi: ft=javascript
