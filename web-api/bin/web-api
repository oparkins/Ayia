#!/usr/bin/env node
const Path    = require('path');
const Yargs   = require('yargs');
const Express = require('express');
const Cors    = require('cors');
const Http    = require('http');

const load_config     = require('../lib/load_config');
const mongo_connect   = require('../lib/mongo');
const add_api_routes  = require('../api');

const args  = Yargs
	.usage('Start an Ayia web API server')
  .options({
    c: {
      alias   : 'config',
      describe: 'A YAML configuration file',
      default : Path.resolve(
                  Path.join( __dirname, '..', 'etc', 'config.yaml' )
                ),
      type    : 'string',
    },
    v: {
      alias   : 'verbosity',
      describe: 'Increase debug verbosity',
      count   : true,
    },
    h: { alias : [ '?', 'help' ] },
  })
  .help()
  .parse();

async function main() {
  const config  = load_config( args );
  const mongo   = await mongo_connect( config.mongodb );
  const app     = Express();

  /* Mix-in `mongo` to `config.mongodb` to make our mongo connections available
   * where needed.
   */
  Object.assign( config.mongodb, mongo );

  // Enable all CORS requests
  app.use( Cors() );

  // Static routes {
  app.get('/healthcheck', (req, res) => { res.end('ok') });
  app.get('/config',      (req, res) => {
    // Exclude the db password
    const safeConfig  = {...config};
    safeConfig.mongodb.password = '<redacted>';

    res.status( 200 ).json( safeConfig )
  });
  // Static routes }

  // Additional API routes
  add_api_routes( app, config );

  // Create a server
  let server = Http.createServer( app );

  // Establish signal/exit handlers {
  const onExit  = (event) => {
    console.log(' :', event);
    if (server) { server.close(); server = null; }
  };

  process.on('SIGINT',  onExit);
  process.on('SIGTERM', onExit);
  // Establish signal/exit handlers }

  server.on('close', (event) => {
    // On server close, close our database connection
    if (mongo.client) { mongo.client.close(); mongo.client = null; }
  });

  // Listen according to the connection settings in `config.web_api`
  server.listen( config.web_api, () => {
    console.log('>>> Listening:', server.address());
  });
}

main().catch(console.dir);
