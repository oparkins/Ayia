#!/usr/bin/env node
const Versions  = require('..');
const Cheerio   = require('cheerio');

async function main() {
  const args  = process.argv.slice(1);
  const vers  = args[1];
  if (vers == null) { _usage( args ) }

  //const version   = await _findVersion( vers );
  Versions.getVersion( vers )
    .then( version => {
      Object.entries(version.books).forEach( ([key,val]) => {
        _parseBook( key, val );
      });
    })
    .catch(err => {
      console.error('***', err);
    });
}

main();

/****************************************************************************
 * Private helpers {
 *
 */

/**
 *  Present usage information and exit.
 *  @method _usage
 *  @param  args    The incoming arguments {Array};
 *
 *  @return void  (exits the process)
 *  @private
 */
function _usage( args ) {
  const Path  = require('path');
  const prog  = Path.basename( args[0] );
  console.log(`
***
*** Usage: ${prog} version-abbreviation
***
`);

  process.exit(-1);
}

/**
 *  Parse a single book.
 *  @method _parseBook
 *  @param  abbrev    The book abbreviation {String};
 *  @param  chapters  The chapter data for this book {Object};
 *
 *  @return void
 *  @private
 */
function _parseBook( abbrev, chapters ) {
  console.log('_parseBook( %s ):', abbrev);

  Object.entries( chapters ).forEach( ([chp, lines]) => {
    const $         = Cheerio.load( lines.join( '' ) );
    const children  = $( '.chapter' ).children();

    console.log('  %s: (%d children)', chp, children.length);
    children.each( (idex, el) => {
      const $el = $(el) ;

      //console.log('    %s: %s', idex, $el.html());
      console.log('    %s: %s', idex, $el.prop('outerHTML'));
    });
  });
}

/* Private helpers }
 ****************************************************************************/

// vi: ft=javascript
