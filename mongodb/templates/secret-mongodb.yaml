# printf "%s-mongodb" .Release.Name
{{- $secretName := .Values.mongodb.auth.existingSecret }}
apiVersion: v1
kind: Secret
type: Opaque
metadata:
  name: {{ $secretName }}
  annotations:
    'helm.sh/hook': pre-install,post-delete
    'helm.sh/resource-policy': keep
{{- if .Release.IsUpgrade }}
###
# Propagate any existing secret
#
data: {{ (lookup "v1" "Secret" .Release.Namespace $secretName).data }}
{{- else }}
###
# Generate new secret data with a random password
#
# :NOTE: We MUST place values from subcharts in a variable.
#        Attempting to use them directly causes helm heartburn.
#
# For use as an existing secret for mongodb, MUST contain:
#   mongodb-passwords
#   mongodb-root-password
#   [mongodb-metrics-password]
#   [mongodb-replica-set-key]
#
{{-  $secretLen := (int .Values.global.secretLen) }}
{{-  $mongoSvc  := include "mongodb.fullname" .Subcharts.mongodb -}}
{{-  $mongoPort := .Values.mongodb.containerPorts.mongodb -}}
{{-  $rootPass  := randAlphaNum $secretLen }}
{{-  $userPass  := randAlphaNum $secretLen }}
stringData:
  mongodb-root-password:  {{ $rootPass }}
  mongodb-passwords:      {{ $userPass }}

  # Additional data we make available for our use
  proto:    mongodb
  host:     {{ $mongoSvc }}
  port:     {{ $mongoPort | quote }}
  database: {{ .Values.mongodb.auth.database }}
  user:     {{ .Values.mongodb.auth.username }}
  password: {{ $userPass }}
{{- end }}
